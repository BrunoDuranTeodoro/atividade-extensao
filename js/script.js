// --- VARI√ÅVEIS DO QUIZ E REFER√äNCIAS ---
const questions = [
    // Seus dados de perguntas (mantidos)
    { question: "O que mais te desperta curiosidade?", options: { a: "Como os aplicativos e sistemas funcionam por tr√°s das telas", b: "Como as m√°quinas e rob√¥s executam seus movimentos", c: "Como unir o digital e o f√≠sico em um solo projeto" } },
    { question: "Voc√™ prefere trabalhar com:", options: { a: "Computadores e softwares", b: "Equipamentos e m√°quinas", c: "Um pouco dos dois" } },
    { question: "Quando algo n√£o funciona direito, voc√™ tende a:", options: { a: "Analisar o problema e revisar o c√≥digo", b: "Abrir o aparelho e investigar o que est√° errado fisicamente", c: "Procurar uma forma pr√°tica e r√°pida de resolver" } },
    { question: "Voc√™ gostaria mais de:", options: { a: "Criar aplicativos e sistemas para pessoas e empresas", b: "Desenvolver m√°quinas automatizadas e rob√¥s", c: "Trabalhar em projetos que conectem software e hardware" } },
    { question: "Qual dessas atividades te parece mais interessante?", options: { a: "Programar e ver um software funcionando", b: "Montar e testar um sistema com motores e sensores", c: "Integrar um sistema digital com um equipamento f√≠sico" } },
    { question: "Voc√™ se sente mais confort√°vel com:", options: { a: "L√≥gica, algoritmos e programa√ß√£o", b: "Mec√¢nica, eletr√¥nica e controle", c: "Resolver problemas que envolvem v√°rias √°reas ao mesmo tempo" } },
    { question: "O que voc√™ mais gosta de ver funcionando?", options: { a: "Um site ou aplicativo fluindo perfeitamente", b: "Uma m√°quina automatizada executando uma tarefa sozinha", c: "Um sistema que combina software e rob√≥tica" } },
    { question: "Qual tipo de erro voc√™ prefere resolver?", options: { a: "Um bug no c√≥digo", b: "Um defeito el√©trico ou mec√¢nico", c: "Um problema de integra√ß√£o entre os dois" } },
    { question: "Voc√™ se considera mais:", options: { a: "Anal√≠tico e l√≥gico", b: "Pr√°tico e experimental", c: "Criativo e adapt√°vel" } },
    { question: "Voc√™ aprende melhor quando:", options: { a: "Estuda conceitos te√≥ricos e c√≥digos", b: "Coloca a m√£o na m√£o e testa na pr√°tica", c: "Alterna entre teoria e pr√°tica" } },
    { question: "Onde voc√™ se imagina trabalhando no futuro?", options: { a: "Em uma empresa de tecnologia, desenvolvendo softwares", b: "Em uma ind√∫stria automatizada, mexendo com m√°quinas e rob√¥s", c: "Em um ambiente que conecte tecnologia digital e automa√ß√£o" } },
    { question: "Qual tipo de inova√ß√£o mais te empolga?", options: { a: "Aplicativos, intelig√™ncia artificial e dados", b: "Rob√≥tica, automa√ß√£o e controle", c: "Internet das Coisas (IoT), onde tudo se conecta" } }
];

const cursosInfo = {
    ads: "üíª MAGIA DOS SISTEMAS: Focado em criar, analisar, desenvolver e gerenciar softwares, aplicativos e sistemas de informa√ß√£o. Envolve muita programa√ß√£o e l√≥gica de neg√≥cios.",
    mecatronica: "ü§ñ TOCA DOS MECATR√îNICOS: Focado em integrar mec√¢nica, eletr√¥nica e software para criar e manter sistemas automatizados e rob√¥s industriais. Envolve projetos pr√°ticos com hardware.",
    neutro: "üí° Perfil Vers√°til! Voc√™ se encaixa bem em √°reas que unem ADS e Mecatr√¥nica, como Automa√ß√£o de Sistemas ou IoT."
};

let currentQuestion = 0;
let adsScore = 0;
let mecScore = 0;
const totalQuestions = questions.length;

// Refer√™ncias seguras aos elementos (CRUCIAL para evitar 'bugado')
const quizContainer = document.querySelector(".quiz-container"); 
const quizContent = document.getElementById("quiz-content"); // Mudou para "quiz-content"
const player = document.getElementById('player'); 
const finalScreen = document.getElementById('final-screen'); 
const resultDetails = document.getElementById('result-details'); 

// Cores e Posi√ß√µes
const colorMeca = [90, 90, 90];   
const colorAds = [0, 150, 200];   
const POS_MECA = 25; 
const POS_ADS = 75;  
const POS_NEUTRO = 50; 

// --- FUN√á√ïES DE CONTROLE DE CORES E PROGRESSO ---
const lerp = (start, end, t) => Math.round(start * (1 - t) + end * t);

function updateColor() {
    // ... (Mantida) ...
    if (!quizContainer) return; // Checagem de seguran√ßa
    if (currentQuestion === 0) {
        quizContainer.style.backgroundColor = 'rgba(4, 15, 60, 0.9)';
        return;
    }
    const totalScore = adsScore + mecScore;
    const adsRatio = totalScore > 0 ? adsScore / totalScore : 0.5; 
    const r = lerp(colorMeca[0], colorAds[0], adsRatio);
    const g = lerp(colorMeca[1], colorAds[1], adsRatio);
    const b = lerp(colorMeca[2], colorAds[2], adsRatio);
    quizContainer.style.backgroundColor = `rgba(${r}, ${g}, ${b}, 0.9)`;
}

function updateProgress() {
    if (!player) return; // Checagem de seguran√ßa

    const progressPercent = (currentQuestion / totalQuestions) * 100;
    
    // Move o player apenas se ele estiver DENTRO do quiz-container
    if (player.parentNode === quizContainer) {
        player.style.left = `${progressPercent}%`;
    }
}


// --- FUN√á√ïES DE CONTROLE DO QUIZ ---

/**
 * Prepara a tela inicial, move o player para a barra de progresso.
 */
function showStartScreen() {
    // Esconde tela final
    finalScreen.classList.add('hidden');
    resultDetails.classList.add('hidden');
    document.getElementById('meca-label').classList.add('hidden'); 
    document.getElementById('ads-label').classList.add('hidden');

    // Mostra quiz box
    quizContainer.classList.remove('hidden'); 
    
    // **********************************************
    // CORRE√á√ÉO CRUCIAL: Movendo o player para a barra
    // **********************************************
    if (player && quizContainer) {
        // Garante que o player volte para o quiz-container
        if (player.parentNode !== quizContainer) {
            quizContainer.prepend(player); 
        }
        player.classList.remove('player-final');
        // Limpa estilos fixos que vieram da tela final
        player.style.top = '';
        player.style.left = '0%'; // Come√ßa em 0%
    }
    // **********************************************

    quizContent.innerHTML = `
        <div style="text-align: left;">
            <p style="font-size: 1.1em; margin-bottom: 20px;">
                "Meu corpo est√° estranho... preciso descobrir o que est√° acontecendo comigo... Eu n√£o lembro nem onde estou!"
                <br><br>
                <strong>Voc√™ precisa atravessar a Ponte do Conhecimento, respondendo a ${totalQuestions} Esf√≠nges do Destino.</strong>
            </p>
            <div style="text-align: center;">
                <button class="start-btn" onclick="startQuiz()">[ Iniciar Desafio ]</button> 
            </div>
        </div>
    `;
    
    updateProgress();
    updateColor(); 
}

function startQuiz() {
    loadQuestion(); 
}


function loadQuestion() {
    if (currentQuestion >= totalQuestions) {
        animateResult();
        return;
    }

    updateProgress(); 
    updateColor();
    
    const q = questions[currentQuestion];
    
    const counter = `<div class="question-counter">Esfinge ${currentQuestion + 1} de ${totalQuestions}</div>`;
    
    quizContent.innerHTML = `
        ${counter}
        <div class="question">
          <h3>${q.question}</h3>
          <div class="options">
            ${Object.entries(q.options)
              .map(
                ([key, text]) =>
                  `<button onclick="selectAnswer('${key}')">${text}</button>`
              )
              .join("")}
          </div>
        </div>
    `;
}

function selectAnswer(option) {
    if (option === "a") adsScore++;
    if (option === "b") mecScore++;
    if (option === "c") {
        adsScore += 0.5;
        mecScore += 0.5;
    }
    currentQuestion++;
    
    setTimeout(loadQuestion, 500); 
}

/**
 * Anima o player para a casa de destino e exibe o resultado.
 */
function animateResult() {
    
    // 1. Pega a posi√ß√£o final do player na barra e TRANSFERE.
    const finalLeftQuiz = player.style.left; 
    document.body.appendChild(player); 
    player.classList.add('player-final');
    
    // 2. Define a posi√ß√£o inicial do player no mapa (onde ele estava na barra).
    player.style.top = '75vh'; // Altura que corresponde ao ch√£o onde a barra estava
    player.style.left = finalLeftQuiz; 
    
    // 3. Determina o Destino Final
    let finalPosition = POS_NEUTRO;
    let finalSuggestion = "";
    let courseDetails = "";

    if (adsScore > mecScore + 1.5) { 
        finalPosition = POS_ADS;
        finalSuggestion = "üîë Seu Destino: MAGIA DOS SISTEMAS!";
        courseDetails = cursosInfo.ads;
    } else if (mecScore > adsScore + 1.5) {
        finalPosition = POS_MECA;
        finalSuggestion = "üîë Seu Destino: TOCA DOS MECATR√îNICOS!";
        courseDetails = cursosInfo.mecatronica;
    } else {
        finalPosition = POS_NEUTRO;
        finalSuggestion = "üóùÔ∏è Seu Destino: CAMINHO VERS√ÅTIL!";
        courseDetails = cursosInfo.neutro;
    }

    // 4. Esconde o quizContainer e revela os labels e a tela final.
    quizContainer.classList.add('hidden');
    finalScreen.classList.remove('hidden');
    document.getElementById('meca-label').classList.remove('hidden'); 
    document.getElementById('ads-label').classList.remove('hidden');


    // 5. Anima√ß√£o Final: Move o player para cima e para o lado do destino (2 segundos)
    setTimeout(() => {
        player.style.top = '65vh'; // Posi√ß√£o vertical final (ch√£o perto das casas)
        player.style.left = `${finalPosition}%`;
        
        // 6. Exibe os Detalhes do Resultado ap√≥s a anima√ß√£o (2.5s)
        setTimeout(() => {
            showResultDetails(finalSuggestion, courseDetails);
        }, 2000); 
        
    }, 100); 
}


function showResultDetails(suggestion, details) {
    resultDetails.innerHTML = `
        <h2>${suggestion}</h2>
        <p style="margin-top: 15px; font-weight: bold;">[ RELAT√ìRIO VOCACIONAL ]</p>
        <p>${details}</p>
        <p style="margin-top: 15px;">**Pontua√ß√£o Final:**</p>
        <p>Sistemas (ADS): <span style="color: #00ff00; font-weight: bold;">${adsScore.toFixed(1)}</span> | Mecatr√¥nica: <span style="color: #00ff00; font-weight: bold;">${mecScore.toFixed(1)}</span></p>
        
        <div style="text-align: center;">
            <button class="restart-btn" onclick="restartQuiz()">[ Recome√ßar a Jornada ]</button>
        </div>
    `;
    resultDetails.classList.remove('hidden');
}


function restartQuiz() {
    currentQuestion = 0;
    adsScore = 0;
    mecScore = 0;
    
    // Garante que o quiz box apare√ßa novamente
    quizContainer.classList.remove('hidden'); 
    
    // Esconde os elementos do final
    finalScreen.classList.add('hidden'); 
    
    showStartScreen();
}

// Inicializa o jogo
showStartScreen();